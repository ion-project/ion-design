/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface IdButton {
      'type': 'text' | 'outlined' | 'contained';
    }
  }

  interface HTMLIdButtonElement extends StencilComponents.IdButton, HTMLStencilElement {}

  var HTMLIdButtonElement: {
    prototype: HTMLIdButtonElement;
    new (): HTMLIdButtonElement;
  };
  interface HTMLElementTagNameMap {
    'id-button': HTMLIdButtonElement;
  }
  interface ElementTagNameMap {
    'id-button': HTMLIdButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'id-button': JSXElements.IdButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface IdButtonAttributes extends HTMLAttributes {
      'type'?: 'text' | 'outlined' | 'contained';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface IdRipple {

    }
  }

  interface HTMLIdRippleElement extends StencilComponents.IdRipple, HTMLStencilElement {}

  var HTMLIdRippleElement: {
    prototype: HTMLIdRippleElement;
    new (): HTMLIdRippleElement;
  };
  interface HTMLElementTagNameMap {
    'id-ripple': HTMLIdRippleElement;
  }
  interface ElementTagNameMap {
    'id-ripple': HTMLIdRippleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'id-ripple': JSXElements.IdRippleAttributes;
    }
  }
  namespace JSXElements {
    export interface IdRippleAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface IdTooltip {
      'position': 'top' | 'right' | 'bottom' | 'left';
      'text': string;
    }
  }

  interface HTMLIdTooltipElement extends StencilComponents.IdTooltip, HTMLStencilElement {}

  var HTMLIdTooltipElement: {
    prototype: HTMLIdTooltipElement;
    new (): HTMLIdTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'id-tooltip': HTMLIdTooltipElement;
  }
  interface ElementTagNameMap {
    'id-tooltip': HTMLIdTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'id-tooltip': JSXElements.IdTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface IdTooltipAttributes extends HTMLAttributes {
      'position'?: 'top' | 'right' | 'bottom' | 'left';
      'text'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;